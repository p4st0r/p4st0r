<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梦与代码</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-14T07:59:33.828Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日语五十音</title>
    <link href="http://example.com/2021/12/14/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/"/>
    <id>http://example.com/2021/12/14/%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3/</id>
    <published>2021-12-14T07:14:50.000Z</published>
    <updated>2021-12-14T07:59:33.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日语与其他语言共同之处"><a href="#日语与其他语言共同之处" class="headerlink" title="日语与其他语言共同之处"></a>日语与其他语言共同之处</h1><p>其实日语和英语是比较一样的在上都是一个个字母所组成的。而一个个字母组合起来就是一个词。而且组合的词更像是一个汉字。比如：<br>汉语叫做 <strong>时间</strong><br>在日语就是 <strong>時間</strong>（跟汉语繁体一样）<br>把他拆开来读就是 <strong>じかん</strong> （是不是有点像汉字拼音）</p><h1 id="日语五十音表"><a href="#日语五十音表" class="headerlink" title="日语五十音表"></a>日语五十音表</h1><p><img src="../images/nihon_00.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;日语与其他语言共同之处&quot;&gt;&lt;a href=&quot;#日语与其他语言共同之处&quot; class=&quot;headerlink&quot; title=&quot;日语与其他语言共同之处&quot;&gt;&lt;/a&gt;日语与其他语言共同之处&lt;/h1&gt;&lt;p&gt;其实日语和英语是比较一样的在上都是一个个字母所组成的。而一个个字母组</summary>
      
    
    
    
    <category term="其他语言" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="日语" scheme="http://example.com/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>《C程序设计》读书笔记</title>
    <link href="http://example.com/2021/12/12/%E3%80%8AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/12/12/%E3%80%8AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2021-12-12T07:49:16.000Z</published>
    <updated>2021-12-13T05:24:10.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-程序设计和-C-语言"><a href="#第一章-程序设计和-C-语言" class="headerlink" title="第一章 程序设计和 C 语言"></a>第一章 程序设计和 C 语言</h1><blockquote><p>《C程序设计》(第五版)pdf<br><a href="https://pan.baidu.com/s/1fY0gnJa-eL4ygMKdxFywjg">下载链接</a> 提取码: gjrv<br>计算机交流qq群：517966161</p></blockquote><h2 id="1-1-什么是计算机程序"><a href="#1-1-什么是计算机程序" class="headerlink" title="1.1 什么是计算机程序"></a>1.1 什么是计算机程序</h2><p>所谓程序，就是一组计算机能识别和执行的指令。计算机的一切操作都是由程序控制的，离开程序，计算机将一事无成。</p><h2 id="1-2-什么是计算机语言"><a href="#1-2-什么是计算机语言" class="headerlink" title="1.2 什么是计算机语言"></a>1.2 什么是计算机语言</h2><ol><li>机器语言 —— 计算机能之别识别和接受的二进制代码称为<strong>机器指令</strong>。机器指令的集合就是该计算机的<strong>机器语言</strong>。</li><li>符号语言 —— 通过<strong>汇编程序</strong>的软件把符号语言的指令转换为机器指令。又称为<strong>汇编语言</strong>。</li><li>高级语言 —— 功能很强，且不依赖于具体机器，用它写出的程序对任何型号的计算机都使用，他与具体机器距离较远。会把源程序编译成目标程序。  <ol><li>非结构化的语言 —— 只要符合语法谷子额即可，变成风格比较随意。</li><li>结构化的语言 —— 程序总是由上而下顺序执行各个基本结构。</li><li> 面向对象的语言 —— 对象是由数据以及对数据进行的操作组成的。</li></ol></li></ol><h2 id="1-3-C语言的发展及其特点"><a href="#1-3-C语言的发展及其特点" class="headerlink" title="1.3 C语言的发展及其特点"></a>1.3 C语言的发展及其特点</h2><ol><li>语法简洁、紧凑、使用方便、灵活。</li><li>运算符丰富</li><li>数据类型丰富</li><li>具有结构化的控制语句</li><li>语法限制不太严格，程序设计自由度大。</li><li>C 语言允许直接访问物理地址，能进行 bit 的操作。</li><li>用 C 语言编写的程序可移植性好</li><li>生成目标代码质量高，程序执行效率高。</li></ol><h2 id="1-4-最简单的-C-语言程序"><a href="#1-4-最简单的-C-语言程序" class="headerlink" title="1.4 最简单的 C 语言程序"></a>1.4 最简单的 C 语言程序</h2><h3 id="1-4-1-简单的距离子"><a href="#1-4-1-简单的距离子" class="headerlink" title="1.4.1 简单的距离子"></a>1.4.1 简单的距离子</h3><p><code>例 1.1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>          <span class="comment">/*这是编译预处理指令*/</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                  <span class="comment">/*定义主函数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;                           <span class="comment">/*函数开始的标志*/</span></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;This is a C program.\n&quot;</span>);  <span class="comment">/*输出所指定的一行信息*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;               <span class="comment">/*函数执行时的返回函数值 0*/</span></span><br><span class="line">&#125;                           <span class="comment">/*函数结束的标志*/</span></span><br></pre></td></tr></table></figure><p><strong>程序分析</strong>  </p><ul><li><code>main</code>是函数的名字，表示着主函数  </li><li><code>int</code>表示函数类型是整型  </li><li><code>return 0</code>的作用是 main函数执行结束前将整数 0 作为函数值，返回到调用函数处。</li><li><code>//</code>表示着注释，也有<code>/* xxx */</code>的注释方式</li><li><code>printf</code> 是系统提供的函数库中输出函数。</li><li><code>\n</code>是换行符</li></ul><p><code>例子 1.2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">//这是编译预处理指令</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>              <span class="comment">//定义主函数</span></span></span><br><span class="line"><span class="function"></span>&#123;                       <span class="comment">//函数的开始</span></span><br><span class="line">    <span class="keyword">int</span> a,b,sum;        <span class="comment">//是程序的声明部分，定义 a,b,sum</span></span><br><span class="line">    a = <span class="number">123</span>;            <span class="comment">//对变量a的赋值</span></span><br><span class="line">    b = <span class="number">456</span>;            <span class="comment">//对变量b的赋值</span></span><br><span class="line">    sum = a+b;          <span class="comment">//进行加法运算，并把结果存放在变量 sum</span></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;sum is %d \n&quot;</span>,sum);        <span class="comment">//输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;           <span class="comment">//使函数返回值为 0</span></span><br><span class="line">&#125;                       <span class="comment">//函数结束</span></span><br></pre></td></tr></table></figure><p><strong>程序分析</strong><br><code>int a,b,sum;</code>是声明部分，定义a,b和sum为整型变量<br><code>a = 123; b = 456;</code>是对 a 和 b 进行赋值<br><code>%d</code>是指定的输出格式，<code>d</code>表示用十进制整数的形式-输出。  </p><h3 id="1-4-2-C语言程序的结构"><a href="#1-4-2-C语言程序的结构" class="headerlink" title="1.4.2 C语言程序的结构"></a>1.4.2 C语言程序的结构</h3><ol><li><p>一个程序由一个或多个源程序文件组成的</p><ul><li>预处理指令 —— <code>stdio.h</code>是头文件的内容 </li><li>全局声明 —— <code>int a,b,sun</code> </li><li>函数的定义 —— 要制定每个函数的功能</li></ul></li><li><p>函数是 C 程序的主要组成部分。也是 C 程序的基本单位。</p></li><li><p>一个函数包括两个部分 </p><ul><li>函数首部 —— 参数名、函数类型、函数属性、函数参数、函数类型。</li><li>函数数体 —— 声明部分、执行部分。</li></ul></li><li><p>程序总是从<code>main</code>函数开始执行</p></li><li><p>程序中要求计算机完成的操作是函数中的 C 语句完成的</p></li><li><p>在每个数据声明和语句的最后必须有分号<code>;</code></p></li><li><p>C 语言本身不提供输入输出语句</p></li><li><p>程序应当包含注释说明</p></li></ol><h2 id="1-5-运行-C-程序的步骤方法"><a href="#1-5-运行-C-程序的步骤方法" class="headerlink" title="1.5 运行 C 程序的步骤方法"></a>1.5 运行 C 程序的步骤方法</h2><ol><li>上机输入和编辑程序。文件格式名为<code>.c</code></li><li>对源程序用编译器进行编译。</li><li>运行可执行程序，得到的运行结果</li></ol><h2 id="1-6-程序设计的任务"><a href="#1-6-程序设计的任务" class="headerlink" title="1.6 程序设计的任务"></a>1.6 程序设计的任务</h2><ol><li>问题分析</li><li>设计算法</li><li>编写程序</li><li>对源程序进行编辑、编译、连接</li><li>运行程序，分析结果</li><li>编写程序文档</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-程序设计和-C-语言&quot;&gt;&lt;a href=&quot;#第一章-程序设计和-C-语言&quot; class=&quot;headerlink&quot; title=&quot;第一章 程序设计和 C 语言&quot;&gt;&lt;/a&gt;第一章 程序设计和 C 语言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;《C程序设计》(第</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="http://example.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>markdown教程</title>
    <link href="http://example.com/2021/12/07/markdown%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2021/12/07/markdown%E6%95%99%E7%A8%8B/</id>
    <published>2021-12-07T13:05:49.000Z</published>
    <updated>2021-12-11T08:03:48.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，**反斜杠 <code>\</code><strong>，</strong>符号’`’**。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main()&#123;    printf(&quot;Hello, Markdown.&quot;);&#125;</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown">https://github.com/younghz/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;Markdown是什么？&quot;&gt;&lt;a href=&quot;#Markdown是什么？&quot; class=</summary>
      
    
    
    
    <category term="转载" scheme="http://example.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/12/07/hello-world/"/>
    <id>http://example.com/2021/12/07/hello-world/</id>
    <published>2021-12-07T07:39:35.358Z</published>
    <updated>2021-12-07T07:39:35.358Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
